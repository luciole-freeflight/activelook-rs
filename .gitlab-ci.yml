stages:
  - build
  - test
  - lint

# Setup a cache, to cache job parts between jobs and ensure faster builds
cache:
  key: "$CI_JOB_NAME"
  untracked: true
  paths:
    - $HOME/.cargo
    - target/

# Define a yaml template running a build and then running the tests
.cargo_test_template: &cargo_test
  script:
    - rustc --version && cargo --version
    - cargo build --verbose
    - cargo test --verbose

# Set any required environment variables here
variables:
  RUST_BACKTRACE: "FULL"

# Do any pre-flight requirements here, such as updating $PATH installing dependencies
before_script:
  - export PATH="/root/.cargo/bin:$PATH"

# The following tests: stages inherit from the test template and configure the image used for the various Rust release trains
test:stable:
  image: "rustdocker/rust:stable"
  <<: *cargo_test

# always run clippy and rustfmt agains our codebase
lint:rustfmt:
  image: rust:latest
  allow_failure: true
  script:
    - rustup component add rustfmt
    - cargo fmt -- --write-mode=diff

lint:clippy:
  image: rust:latest
  allow_failure: true
  script:
    - rustup component add clippy
    - cargo clippy --all-targets --all-features -- -D warnings # Turn all warnings into errors
